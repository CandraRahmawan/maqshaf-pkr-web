{"version":3,"sources":["providers/Themes.provider.jsx","lib/i18n.js","config/routes.js","apps/index.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["theme","createTheme","primaryColor","whiteColor","color","white","ThemesProvider","children","ThemeProvider","i18n","use","HttpApi","initReactI18next","init","fallbackLng","lng","interpolation","escapeValue","ns","defaultNS","routes","path","exact","component","lazy","Router","map","route","index","Component","render","props","fallback","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAGMA,EAAQC,YAAY,CACxBC,aAAc,UACdC,WAAY,OACZC,MAAO,CACLC,MAAO,UAQIC,EAJQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACrB,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SAA8BO,K,wBCRhCE,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,YAAa,KACbC,IAAK,KACLC,cAAe,CACbC,aAAa,GAEfC,GAAI,CAAC,UACLC,UAAW,WAGAV,QAAf,E,uBCHeW,EAZA,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,UAAWC,gBAAK,kBAAM,yDCFX,SAASC,IACtB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACGL,EAAOM,KAAI,SAACC,EAAOC,GAAW,IACrBP,EAAsCM,EAAtCN,KAAMC,EAAgCK,EAAhCL,MAAkBO,EAAcF,EAAzBJ,UACrB,OACE,cAAC,IAAD,CAEEF,KAAMA,EACNC,MAAOA,EACPQ,OAAQ,SAACC,GAAD,OACN,cAAC,WAAD,CAAUC,SAAS,aAAnB,SACE,cAACH,EAAD,eAAeE,QALdH,UCACK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCIdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,WAAD,CAAUhB,SAAS,aAAnB,SACE,cAACiB,EAAA,EAAD,CAAiBxC,KAAMA,EAAvB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,YAKRyC,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.1a873d58.chunk.js","sourcesContent":["import { ThemeProvider } from \"@material-ui/core/styles\";\nimport { createTheme } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n  primaryColor: \"#00a8ff\",\n  whiteColor: \"#fff\",\n  color: {\n    white: \"#fff\",\n  },\n});\n\nconst ThemesProvider = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default ThemesProvider;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport HttpApi from \"i18next-http-backend\";\n\ni18n\n  .use(HttpApi)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: \"id\",\n    lng: \"id\",\n    interpolation: {\n      escapeValue: false,\n    },\n    ns: [\"common\"],\n    defaultNS: \"common\",\n  });\n\nexport default i18n;\n","import { lazy } from \"react\";\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    component: lazy(() => import(\"views/shop/SearchProduct.view\")),\n  },\n  // {\n  //   path: \"*\",\n  //   component: lazy(() => import(\"views/error-page/404\")),\n  // },\n];\n\nexport default routes;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport routes from \"config/routes\";\n\nexport default function Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        {routes.map((route, index) => {\n          const { path, exact, component: Component } = route;\n          return (\n            <Route\n              key={index}\n              path={path}\n              exact={exact}\n              render={(props) => (\n                <Suspense fallback=\"loading...\">\n                  <Component {...props} />\n                </Suspense>\n              )}\n            />\n          );\n        })}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport ThemeProvider from \"providers/Themes.provider\";\nimport i18n from \"lib/i18n\";\nimport App from \"./apps\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"styles/styles.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback=\"loading...\">\n      <I18nextProvider i18n={i18n}>\n        <ThemeProvider>\n          <App />\n        </ThemeProvider>\n      </I18nextProvider>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}