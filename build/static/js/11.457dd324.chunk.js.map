{"version":3,"sources":["helpers/formattor.helper.js","apps/components/core/SearchProduct/useStyle.js","hooks/useGetUserByQrCode.hook.js","hooks/useTransactionDebit.hook.js","apps/components/core/SearchProduct/IdentityDataDialog.component.js"],"names":["rupiahFormat","value","currency","reverse","toString","split","join","reverseMatch","match","useStyle","makeStyles","theme","list_modal_image","marginRight","width","height","list_modal_text","color","black","button_progress","position","top","left","marginTop","marginLeft","input_pin","useGetUserByQrCodeHook","code","setShowAlert","useQuery","fetchApiClient","nis","enabled","user","data","errorUser","error","isLoading","useEffect","useTransactionDebitHook","history","useMutation","dataMutationBuy","errorMutationBuy","isLoadingMutationBuy","mutateBuy","mutate","push","IdentityDataDialogComponent","props","classes","useStyles","dispatch","useDispatch","t","handleCloseModal","items","qty","total","useState","resultCode","setResultCode","showAlert","getUser","get","DialogContent","delay","onError","onScan","style","label","List","ListItem","ListItemAvatar","Avatar","AccountBox","ListItemText","primary","secondary","fullName","class","AccountBalanceWallet","deposit","saldo","DialogActions","Button","onClick","clearCart","userId","disabled","CircularProgress","size","className","Floating","severity","text","message"],"mappings":"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","file":"static/js/11.457dd324.chunk.js","sourcesContent":["export const rupiahFormat = (value, currency = \"Rp\") => {\n  const reverse = value.toString().split(\"\").reverse().join(\"\");\n  const reverseMatch = reverse.match(/\\d{1,3}/g);\n  return `${currency}. ${reverseMatch.join(\".\").split(\"\").reverse().join(\"\")}`;\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyle = makeStyles((theme) => ({\n  list_modal_image: {\n    marginRight: 12,\n\n    \"& img\": {\n      width: 50,\n      height: 50,\n    },\n  },\n\n  list_modal_text: {\n    color: theme.color.black,\n  },\n\n  button_progress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n\n  input_pin: {\n    width: \"100%\",\n  },\n}));\n\nexport default useStyle;\n","import { useQuery } from \"react-query\";\nimport { fetchApiClient } from \"helpers/fetchApi.helper\";\nimport { useEffect } from \"react\";\n\nconst useGetUserByQrCodeHook = (code, setShowAlert) => {\n  const {\n    data: user,\n    error: errorUser,\n    isLoading,\n  } = useQuery([\"getUserByQrCode\", code], () =>\n    fetchApiClient(\n      `/user/saldo`,\n      \"GET\",\n      {\n        nis: code,\n      },\n      {\n        enabled: !!code,\n      }\n    )\n  );\n\n  useEffect(() => {\n    if (errorUser) {\n      setShowAlert(true);\n    }\n  }, [errorUser]);\n\n  return { user, errorUser, isLoading };\n};\n\nexport default useGetUserByQrCodeHook;\n","import { useMutation } from \"react-query\";\nimport { fetchApiClient } from \"helpers/fetchApi.helper\";\nimport { useEffect } from \"react\";\n\nconst useTransactionDebitHook = (history, setShowAlert) => {\n  const {\n    data: dataMutationBuy,\n    error: errorMutationBuy,\n    isLoading: isLoadingMutationBuy,\n    mutate: mutateBuy,\n  } = useMutation((data) =>\n    fetchApiClient(\"/transactions/buy/{userId}\", \"POST\", data)\n  );\n\n  useEffect(() => {\n    if (dataMutationBuy) {\n      history.push(\"/pin\");\n    }\n\n    if (errorMutationBuy) {\n      setShowAlert(true);\n    }\n  }, [dataMutationBuy, errorMutationBuy]);\n\n  return { dataMutationBuy, errorMutationBuy, isLoadingMutationBuy, mutateBuy };\n};\n\nexport default useTransactionDebitHook;\n","import { useState } from \"react\";\nimport {\n  Button,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { AccountBox, AccountBalanceWallet } from \"@material-ui/icons\";\nimport get from \"lodash/get\";\nimport QrReader from \"react-qr-reader\";\nimport { array, func, number, object } from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { clearCart } from \"redux/reducers/cartSelected.reducer\";\nimport useGetUserByQrCodeHook from \"hooks/useGetUserByQrCode.hook\";\nimport { Spinner, Alert } from \"apps/components/ui\";\nimport { rupiahFormat } from \"helpers/formattor.helper\";\nimport useTransactionDebitHook from \"hooks/useTransactionDebit.hook\";\n\nimport useStyles from \"./useStyle\";\n\nconst IdentityDataDialogComponent = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { t, handleCloseModal, history, items, qty, total } = props;\n  const [resultCode, setResultCode] = useState();\n  const [showAlert, setShowAlert] = useState(false);\n\n  const { user, errorUser, isLoading } = useGetUserByQrCodeHook(\n    resultCode,\n    setShowAlert\n  );\n  const getUser = get(user, \"data\", {});\n\n  const { isLoadingMutationBuy, mutateBuy, errorMutationBuy } =\n    useTransactionDebitHook(history, setShowAlert);\n\n  const handleScan = (data) => {\n    if (data) {\n      setResultCode(data);\n    }\n  };\n\n  const handleError = () => {\n    setShowAlert(true);\n  };\n\n  return (\n    <>\n      <DialogContent>\n        {!user && (\n          <QrReader\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: \"100%\" }}\n          />\n        )}\n        {isLoading ? (\n          <Spinner label={t(\"common:loading\")} />\n        ) : (\n          !errorUser && (\n            <List>\n              <ListItem key=\"user\">\n                <ListItemAvatar>\n                  <Avatar>\n                    <AccountBox />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={getUser?.user?.nis}\n                  secondary={`${getUser?.user?.fullName} - ${getUser?.user?.class}`}\n                />\n              </ListItem>\n              <ListItem key=\"saldo\">\n                <ListItemAvatar>\n                  <Avatar>\n                    <AccountBalanceWallet />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={t(\"common:balance\")}\n                  secondary={rupiahFormat(getUser?.deposit?.saldo)}\n                />\n              </ListItem>\n            </List>\n          )\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            dispatch(clearCart());\n            handleCloseModal();\n          }}\n          color=\"primary\"\n        >\n          {t(\"common:cancel\")}\n        </Button>\n        <Button\n          onClick={() => {\n            mutateBuy({\n              userId: getUser?.user?.userId,\n              total,\n              qty,\n              items,\n            });\n          }}\n          color=\"primary\"\n          disabled={isLoadingMutationBuy}\n        >\n          {t(\"common:pay\")}\n          {isLoadingMutationBuy && (\n            <CircularProgress size={18} className={classes.button_progress} />\n          )}\n        </Button>\n      </DialogActions>\n      <Alert.Floating\n        severity=\"error\"\n        showAlert={showAlert}\n        setShowAlert={setShowAlert}\n        text={\n          errorUser?.message ||\n          errorMutationBuy?.message ||\n          t(\"glossary:notFoundUser\")\n        }\n      />\n    </>\n  );\n};\n\nIdentityDataDialogComponent.propTypes = {\n  t: func.isRequired,\n  handleCloseModal: func.isRequired,\n  history: object.isRequired,\n  items: array.isRequired,\n  qty: number.isRequired,\n  total: number.isRequired,\n};\n\nexport default IdentityDataDialogComponent;\n"],"sourceRoot":""}