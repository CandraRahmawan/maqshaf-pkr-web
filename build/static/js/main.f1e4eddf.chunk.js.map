{"version":3,"sources":["apps/components/ui/Spinner/Spinner.component.jsx","apps/components/ui/Alerts/index.js","apps/components/ui/Skeleton/index.js","apps/components/ui/index.js","redux/reducers/cartSelected.reducer.js","redux/reducers/transaction.reducer.js","providers/Themes.provider.jsx","providers/QueryClient.provider.jsx","constants/common.constant.js","redux/store.js","providers/Redux.provider.jsx","lib/i18n.js","config/routes.js","apps/index.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["useStyles","makeStyles","root","textAlign","marginTop","color","SpinnerComponent","label","classes","Grid","container","className","item","xs","CircularProgress","Floating","lazy","DataTable","Card","DataTables","Button","Dialog","cartSelectedSlice","createSlice","name","initialState","total","qty","items","reducers","selectCart","state","action","payload","map","price","reduce","value","clearCart","actions","transactionSlice","transactionCode","transactionId","transactionDate","saldo","userId","setTransaction","theme","createTheme","primaryColor","orangeColor","whiteColor","white","black","ThemesProvider","children","ThemeProvider","ReactQueryClientProvider","queryClient","QueryClient","defaultOptions","queries","refetchOnMount","refetchOnWindowFocus","retry","QueryClientProvider","client","initialIsOpen","process","configureStore","reducer","cartSelected","cartSelectedReducer","transaction","transactionReducer","devTools","Boolean","localStorage","getItem","ReduxProvider","store","i18n","use","HttpApi","initReactI18next","init","fallbackLng","lng","interpolation","escapeValue","ns","defaultNS","routes","path","exact","component","Router","route","index","Component","render","props","fallback","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dayjs","locale","ReactDOM","StrictMode","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1e4eddf.chunk.js","sourcesContent":["import { CircularProgress, Grid } from '@material-ui/core';\nimport { string } from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    marginTop: '30%',\n\n    '& p': {\n      color: '#000',\n    },\n  },\n});\n\nconst SpinnerComponent = ({ label }) => {\n  const classes = useStyles();\n  return (\n    <Grid container>\n      <Grid className={classes.root} item xs={12}>\n        <CircularProgress />\n        <p>{label}</p>\n      </Grid>\n    </Grid>\n  );\n};\n\nSpinnerComponent.propTypes = {\n  label: string,\n};\n\nexport default SpinnerComponent;\n","import { lazy } from \"react\";\n\nconst Floating = lazy(() => import(\"./Floating.component\"));\n\nexport default { Floating };\n","import { lazy } from 'react';\n\nconst DataTable = lazy(() => import('./DataTable.component'));\n\nexport default { DataTable };\n","import { lazy } from 'react';\nimport Spinner from './Spinner/Spinner.component';\nimport Alert from './Alerts';\nimport Skeleton from './Skeleton';\n\nconst Card = lazy(() => import('./Cards/Card.component'));\nconst DataTables = lazy(() => import('./DataTables/DataTable.component'));\nconst Button = lazy(() => import('./Button/Button.component'));\nconst Dialog = lazy(() => import('./Dialog/Dialog.component'));\n\nexport { Card, Spinner, Alert, Skeleton, DataTables, Button, Dialog };\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cartSelectedSlice = createSlice({\n  name: \"cartSelected\",\n  initialState: {\n    total: 0,\n    qty: 0,\n    items: [],\n  },\n  reducers: {\n    selectCart: (state, action) => {\n      const { items } = action.payload;\n      state.total = items\n        .map((item) => item.price * item.qty)\n        .reduce((total, value) => total + value);\n      state.qty = items\n        .map((item) => item.qty)\n        .reduce((total, value) => total + value);\n      state.items = items;\n    },\n    clearCart: (state) => {\n      state.total = 0;\n      state.qty = 0;\n      state.items = [];\n    },\n  },\n});\n\nexport const { selectCart, clearCart } = cartSelectedSlice.actions;\n\nexport default cartSelectedSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const transactionSlice = createSlice({\n  name: \"setTransaction\",\n  initialState: {\n    transactionCode: 0,\n    transactionId: 0,\n    transactionDate: \"\",\n    qty: 0,\n    saldo: 0,\n    total: 0,\n    userId: 0,\n    items: [],\n  },\n  reducers: {\n    setTransaction: (state, action) => {\n      const {\n        items,\n        qty,\n        saldo,\n        transactionCode,\n        transactionId,\n        transactionDate,\n        total,\n        userId,\n      } = action.payload;\n      state.transactionCode = transactionCode;\n      state.transactionId = transactionId;\n      state.transactionDate = transactionDate;\n      state.qty = qty;\n      state.saldo = saldo;\n      state.total = total;\n      state.userId = userId;\n      state.items = items;\n    },\n  },\n});\n\nexport const { setTransaction } = transactionSlice.actions;\n\nexport default transactionSlice.reducer;\n","import { ThemeProvider } from \"@material-ui/core/styles\";\nimport { createTheme } from \"@material-ui/core/styles\";\n\nconst theme = createTheme({\n  primaryColor: \"#00a8ff\",\n  orangeColor: \"#ff9100\",\n  whiteColor: \"#fff\",\n  color: {\n    white: \"#fff\",\n    black: \"#000\",\n  },\n});\n\nconst ThemesProvider = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default ThemesProvider;\n","import { QueryClientProvider, QueryClient } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { element } from \"prop-types\";\nimport { isDevelopment } from \"constants/common.constant\";\n\nexport default function ReactQueryClientProvider({ children }) {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnMount: false,\n        refetchOnWindowFocus: false,\n        retry: false,\n      },\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      <ReactQueryDevtools initialIsOpen={isDevelopment} />\n    </QueryClientProvider>\n  );\n}\n\nReactQueryClientProvider.propTypes = {\n  children: element.isRequired,\n};\n","export const isDevelopment = process.env.NODE_ENV === \"development\";\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { isDevelopment } from \"constants/common.constant\";\nimport cartSelectedReducer from \"./reducers/cartSelected.reducer\";\nimport transactionReducer from \"./reducers/transaction.reducer\";\n\nexport default configureStore({\n  reducer: {\n    cartSelected: cartSelectedReducer,\n    transaction: transactionReducer,\n  },\n  devTools: isDevelopment || Boolean(localStorage.getItem(\"redux-debug\")),\n});\n","import { Provider } from \"react-redux\";\nimport store from \"redux/store\";\nimport { element } from \"prop-types\";\n\nexport default function ReduxProvider({ children }) {\n  return <Provider store={store}>{children}</Provider>;\n}\n\nReduxProvider.propTypes = {\n  children: element.isRequired,\n};\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport HttpApi from \"i18next-http-backend\";\n\ni18n\n  .use(HttpApi)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: \"id\",\n    lng: \"id\",\n    interpolation: {\n      escapeValue: false,\n    },\n    ns: [\"common\"],\n    defaultNS: \"common\",\n  });\n\nexport default i18n;\n","import { lazy } from 'react';\n\nconst routes = [\n  {\n    path: '/:action(identitas|pin)?',\n    exact: true,\n    component: lazy(() => import('views/shop/SearchProduct.view')),\n  },\n  {\n    path: '/dashboard',\n    exact: true,\n    component: lazy(() => import('views/dashboard/Dashboard.view')),\n  },\n  {\n    path: '/dashboard/login',\n    exact: true,\n    component: lazy(() => import('views/dashboard/Login.view')),\n  },\n  {\n    path: '/dashboard/produk',\n    exact: true,\n    component: lazy(() => import('views/dashboard/products/ProductList.view')),\n  },\n  {\n    path: '/dashboard/santri',\n    exact: true,\n    component: lazy(() => import('views/dashboard/users/UserList.view')),\n  },\n  {\n    path: '/dashboard/santri/:id',\n    exact: true,\n    component: lazy(() => import('views/dashboard/users/UserDetail.view')),\n  },\n  {\n    path: '/dashboard/administrator',\n    exact: true,\n    component: lazy(() => import('views/dashboard/administrator/AdministratorList.view')),\n  },\n  {\n    path: '/dashboard/administrator/:id',\n    exact: true,\n    component: lazy(() => import('views/dashboard/administrator/AdministratorDetail.view')),\n  },\n  {\n    path: '/dashboard/transaksi/masuk',\n    exact: true,\n    component: lazy(() => import('views/dashboard/users/UserList.view')),\n  },\n  {\n    path: '/dashboard/transaksi/keluar',\n    exact: true,\n    component: lazy(() => import('views/dashboard/users/UserList.view')),\n  },\n  {\n    path: '/dashboard/cek-saldo',\n    exact: true,\n    component: lazy(() => import('views/dashboard/CheckBalanced.view')),\n  },\n  // {\n  //   path: \"*\",\n  //   component: lazy(() => import(\"views/error-page/404\")),\n  // },\n];\n\nexport default routes;\n","import React, { Suspense } from \"react\";\nimport { Spinner } from \"apps/components/ui\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport routes from \"config/routes\";\n\nexport default function Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        {routes.map((route, index) => {\n          const { path, exact, component: Component } = route;\n          return (\n            <Route\n              key={index}\n              path={path}\n              exact={exact}\n              render={(props) => (\n                <Suspense fallback={<Spinner label=\"Sedang memuat data...\" />}>\n                  <Component {...props} />\n                </Suspense>\n              )}\n            />\n          );\n        })}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport ThemeProvider from 'providers/Themes.provider';\nimport QueryClientProvider from 'providers/QueryClient.provider';\nimport ReduxProvider from 'providers/Redux.provider';\nimport { Spinner } from 'apps/components/ui';\nimport i18n from 'lib/i18n';\nimport App from './apps';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'dayjs/locale/id';\n\nimport 'styles/styles.scss';\nimport 'sweetalert2/src/sweetalert2.scss';\n\ndayjs.locale('id');\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<Spinner label=\"Sedang memnuat halaman...\" />}>\n      <I18nextProvider i18n={i18n}>\n        <ReduxProvider>\n          <ThemeProvider>\n            <QueryClientProvider>\n              <App />\n            </QueryClientProvider>\n          </ThemeProvider>\n        </ReduxProvider>\n      </I18nextProvider>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}